// Given this function:
function filterOutOdds() {
  var nums = Array.prototype.slice.call(arguments);
  return nums.filter(function(num) {
    return num % 2 === 0
  });
}

// Refactor to use rest and an arrow function

const filterOutOdds = (...args) => args.filter(v => v% 2 === 0)


// findMin
Write a function called findMin that accepts a variable number of arguments and returns the smallest argument.
Make sure to do this using the rest and spread operator.

findMin(1,4,12,-3) // -3
findMin(1,-1) // -1
findMin(3,1) // 1

const findMin = (...args) => Math.min(...args);


//mergeObjects
Write a function called mergedObjects that accepts two objects and returns a new object which contains
all the keys and values of the first object and the second. 

const mergedObjects = (obj1, obj2) => ({...obj1, ...obj2})

//doubleAndReturnArgs
Write a function called doubleAndReturnArgs which accepts an array and a variable number of arguments. 
The func should return a new array with the original array values and all of the additional args doubled. 

const doubleAndReturnArgs = (arr, ...args) => [...arr, args.map(v => v * 2)];

//slice and dice
For this section, write the following functions using rest, spread and refactor these functions to be arrow functions!
Make sure that you are always returning a new array or object and not modifying the existing inputs.


/** remove a random element in the items array
and return a new array without that item. */

const removeRandom = (items) => {
    let randomIdx = Math.floor(Math.random() + items.length); 
    console.log(randomIdx)
    return [...items.slice(0, randomIdx), ...items.slice(randomIdx + 1)]
}

/** Return a new array with every item in array1 and array2. */

const newArr = (arr1, arr2) => {
    return [...arr1, ...arr2];
}

/** Return a new object with all the keys and values
from obj and a new key/value pair */

const addKeyVal = (obj, key, val) => {
    let newObj = {...obj};

    newObj[key] = val;
    return newObj;
}


/** Return a new object with a key removed. */

function removeKey(obj, key) {

}


/** Combine two objects and return a new object. */

const combine = (obj1, obj2) => {
    return {...obj1, ...obj2};
}


/** Return a new object with a modified key and value. */

const update = (obj, key, val) => {
    let newObj = {...obj};

    newObj[key] = val;
    return newObj;
}